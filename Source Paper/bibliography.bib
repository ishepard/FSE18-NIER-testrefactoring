@article{qusef2014recovering,
  Author = {Qusef, Abdallah and Bavota, Gabriele and Oliveto, Rocco and De Lucia, Andrea and Binkley, Dave},
  Journal = {Journal of Systems and Software},
  Pages = {147--168},
  Publisher = {Elsevier},
  Title = {Recovering test-to-code traceability using slicing and textual analysis},
  Volume = {88},
  Year = {2014}}

@inproceedings{sneed2004reverse,
  Author = {Sneed, Harry M},
  Booktitle = {Software Maintenance and Reengineering, 2004. CSMR 2004. Proceedings. Eighth European Conference on},
  Organization = {IEEE},
  Pages = {69--74},
  Title = {Reverse engineering of test cases for selective regression testing},
  Year = {2004}}

@article{Spadini,
abstract = {When writing automated unit tests, developers often deal with software artifacts that have several dependencies. In these cases, one has the possibility of either instantiating the dependencies or using mock objects to simulate the dependencies' expected behavior. Even though recent quantitative studies showed that mock objects are widely used in OSS projects, scientific knowledge is still lacking on how and why practitioners use mocks. Such a knowledge is fundamental to guide further research on this widespread practice and inform the design of tools and processes to improve it. The objective of this paper is to increase our understanding of which test dependencies developers (do not) mock and why, as well as what challenges developers face with this practice. To this aim, we create MOCKEXTRACTOR, a tool to mine the usage of mock objects in testing code and employ it to collect data from three OSS projects and one industrial system. Sampling from this data, we manually analyze how more than 2,000 test dependencies are treated. Subsequently, we discuss our findings with developers from these systems, identifying practices, rationales, and challenges. These results are supported by a structured survey with more than 100 professionals. The study reveals that the usage of mocks is highly dependent on the responsibility and the architectural concern of the class. Developers report to frequently mock dependencies that make testing difficult and prefer to not mock classes that encapsulate domain concepts/rules of the system. Among the key challenges, developers report that maintaining the behavior of the mock compatible with the behavior of original class is hard and that mocking increases the coupling between the test and the production code.},
author = {Spadini, Davide and Aniche, Maur{\'{i}}cio and Bruntink, Magiel and Bacchelli, Alberto},
file = {:Users/dspadini/Library/Application Support/Mendeley Desktop/Downloaded/Spadini et al. - 2017 - To Mock or Not To Mock An Empirical Study on Mocking Practices.pdf:pdf},
journal = {Proceedings of MSR 2017 (14th International Conference on Mining Software Repositories)},
pages = {11},
title = {{To Mock or Not To Mock ? An Empirical Study on Mocking Practices}},
year = {2017}
}


@inproceedings{Zaidman2008,
abstract = {Engineering software systems is a multidisciplinary activity, whereby a number of artifacts must be created - and maintained - synchronously. In this paper we investigate whether production code and the accompanying tests co- evolve by exploring a project's versioning system, code coverage reports and size-metrics. Our main aim for studying this co-evolution is to create awareness with developers and managers alike about the testing process that is followed. We explore the possibilities of our technique through two open source case studies and observe a number of different co-evolution scenarios. We evaluate our results both with the help of log-messages and the original developers of the software system.},
author = {Zaidman, Andy and Rompaey, Bart Van and Demeyer, Serge and Deursen, Arie Van},
booktitle = {2008 International Conference on Software Testing, Verification, and Validation},
doi = {10.1109/ICST.2008.47},
file = {:Users/dspadini/Library/Application Support/Mendeley Desktop/Downloaded/Zaidman et al. - 2008 - Mining Software Repositories to Study Co-Evolution of Production {\&}ampamp{\#}x00026 Test Code.pdf:pdf},
isbn = {978-0-7695-3127-4},
issn = {2159-4848},
keywords = {mining software repositories,software co-evolution,software evolution,software quality,software testing},
month = {apr},
pages = {220--229},
publisher = {IEEE},
title = {{Mining Software Repositories to Study Co-Evolution of Production {\&} Test Code}},
url = {http://ieeexplore.ieee.org/document/4539549/},
volume = {3},
year = {2008}
}


@book{Myers2004,
abstract = {Practical, up-to-date tactics and techniques for successful, efficient testing: Basic testing principles and strategies Program inspections and walkthroughs Code inspections Error checklists Peer ratings Black- and white-box testing Error guessing Top-down vs. bottom-up testing Higher-order testing Function and system testing Acceptance testing Installation testing Module (unit) testing Test planning and control Independent testing agencies Debugging principles Error analysis Extreme Testing Testing Internet applications Higher-order testing of e-commerce architectures},
archivePrefix = {arXiv},
arxivId = {arXiv:gr-qc/9809069v1},
author = {Myers, Glenford},
booktitle = {Software Testing, Verification and Reliability},
doi = {10.1002/stvr.322},
eprint = {9809069v1},
file = {:Users/dspadini/Downloads/The Art of Software Testing - Second Edition.pdf:pdf},
isbn = {0-471-46912-2},
issn = {0960-0833},
pages = {234},
pmid = {15003161},
primaryClass = {arXiv:gr-qc},
title = {{The Art of Software Testing, Second edition}},
url = {http://www.noqualityinside.com/nqi/nqifiles/The Art of Software Testing - Second Edition.pdf},
volume = {15},
year = {2004}
}


@inproceedings{Bertolino2007,
abstract = {Software engineering comprehends several disciplines devoted to prevent and remedy malfunctions and to warrant adequate behaviour. Testing, the subject of this paper, is a widespread validation approach in industry, but it is still largely ad hoc, expensive, and unpredictably effective. Indeed, software testing is a broad term encompassing a variety of activities along the development cycle and beyond, aimed at different goals. Hence, software testing research faces a collection of challenges. A consistent roadmap of the most relevant challenges to be addressed is here proposed. In it, the starting point is constituted by some important past achievements, while the destination consists of four identified goals to which research ultimately tends, but which remain as unreachable as dreams. The routes from the achievements to the dreams are paved by the outstanding research challenges, which are discussed in the paper along with interesting ongoing work.},
author = {Bertolino, Antonia},
booktitle = {Future of Software Engineering (FOSE '07)},
doi = {10.1109/FOSE.2007.25},
file = {:Users/dspadini/Library/Application Support/Mendeley Desktop/Downloaded/Bertolino - 2007 - Software Testing Research Achievements, Challenges, Dreams.pdf:pdf},
isbn = {0-7695-2829-5},
month = {may},
number = {September},
pages = {85--103},
publisher = {IEEE},
title = {{Software Testing Research: Achievements, Challenges, Dreams}},
url = {http://portal.acm.org/citation.cfm?id=1253532.1254712{\&}coll=portal{\&}dl=ACM{\&}CFID=27180219{\&}CFTOKEN=34816711 http://ieeexplore.ieee.org/document/4221614/},
year = {2007}
}



@inproceedings{van2001refactoring,
  title={Refactoring test code},
  author={Van Deursen, Arie and Moonen, Leon and van den Bergh, Alex and Kok, Gerard}
}

@misc{erdogmus2010test,
  title={Test-Driven Development.},
  author={Erdogmus, Hakan and Melnik, Grigori and Jeffries, Ron},
  year={2010}
}

@article{lindstrom2004extreme,
  title={Extreme programming and agile software development methodologies},
  author={Lindstrom, Lowell and Jeffries, Ron},
  journal={Information systems management},
  volume={21},
  number={3},
  pages={41--52},
  year={2004},
  publisher={Taylor \& Francis}
}

@inproceedings{laitenberger1998studying,
  title={Studying the effects of code inspection and structural testing on software quality},
  author={Laitenberger, Oliver},
  booktitle={Software Reliability Engineering, 1998. Proceedings. The Ninth International Symposium on},
  pages={237--246},
  year={1998},
  organization={IEEE}
}

@article{binder1996testing,
  title={Testing object-oriented software: a survey},
  author={Binder, Robert V},
  journal={Software Testing, Verification and Reliability},
  volume={6},
  number={3-4},
  pages={125--252},
  year={1996},
  publisher={Wiley Online Library}
}

@article{aggarwal2014acceptance,
  title={Acceptance Test Driven Development},
  author={Aggarwal, Vishal and Singh, Manpreet},
  journal={Journal of Advanced Computing and Communication Technologies (ISSN: 2347-2804) Volume},
  number={2},
  year={2014}
}

@inproceedings{kim2010ref,
  title={Ref-Finder: a refactoring reconstruction tool based on logic query templates},
  author={Kim, Miryung and Gee, Matthew and Loh, Alex and Rachatasumrit, Napol},
  booktitle={Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering},
  pages={371--372},
  year={2010},
  organization={ACM}
}

@article{sliwerski2005changes,
  title={When Do Changes Induce Fixes?},
  author={Sliwerski, Jacek and Zeller, Thomas Zimmermann Andreas},
  journal={Change},
  volume={1},
  number={1.18},
  pages={1--19},
  year={2005}
}

@article{kim2008classifying,
  title={Classifying software changes: Clean or buggy?},
  author={Kim, Sunghun and Whitehead Jr, E James and Zhang, Yi},
  journal={IEEE Transactions on Software Engineering},
  volume={34},
  number={2},
  pages={181--196},
  year={2008},
  publisher={IEEE}
}

@inproceedings{prete2010template,
  title={Template-based reconstruction of complex refactorings},
  author={Prete, Kyle and Rachatasumrit, Napol and Sudan, Nikita and Kim, Miryung},
  booktitle={Software Maintenance (ICSM), 2010 IEEE International Conference on},
  pages={1--10},
  year={2010},
  organization={IEEE}
}
@inproceedings{silva2016we,
  title={Why we refactor? confessions of github contributors},
  author={Silva, Danilo and Tsantalis, Nikolaos and Valente, Marco Tulio},
  booktitle={Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  pages={858--870},
  year={2016},
  organization={ACM}
}
@inproceedings{sjoberg2012questioning,
  title={Questioning software maintenance metrics: a comparative case study},
  author={Sj{\o}berg, Dag IK and Anda, Bente and Mockus, Audris},
  booktitle={Proceedings of the ACM-IEEE international symposium on Empirical software engineering and measurement},
  pages={107--110},
  year={2012},
  organization={ACM}
}

@article{mens2004survey,
  title={A survey of software refactoring},
  author={Mens, Tom and Tourw{\'e}, Tom},
  journal={IEEE Transactions on software engineering},
  volume={30},
  number={2},
  pages={126--139},
  year={2004},
  publisher={IEEE}
}

@article{subramanyam2003empirical,
  title={Empirical analysis of ck metrics for object-oriented design complexity: Implications for software defects},
  author={Subramanyam, Ramanath and Krishnan, Mayuram S.},
  journal={IEEE Transactions on software engineering},
  volume={29},
  number={4},
  pages={297--310},
  year={2003},
  publisher={IEEE}
}

@inproceedings{heitlager2007practical,
  title={A practical model for measuring maintainability},
  author={Heitlager, Ilja and Kuipers, Tobias and Visser, Joost},
  booktitle={Quality of Information and Communications Technology, 2007. QUATIC 2007. 6th International Conference on the},
  pages={30--39},
  year={2007},
  organization={IEEE}
}
@inproceedings{alves2010deriving,
  title={Deriving metric thresholds from benchmark data},
  author={Alves, Tiago L and Ypma, Christiaan and Visser, Joost},
  booktitle={Software Maintenance (ICSM), 2010 IEEE International Conference on},
  pages={1--10},
  year={2010},
  organization={IEEE}
}
@book{halstead1977elements,
  title={Elements of software science},
  author={Halstead, Maurice Howard},
  volume={7},
  year={1977},
  publisher={Elsevier New York}
}
@article{athanasiou2011constructing,
  title={Constructing a test code quality model and empirically assessing its relation to issue handling performance},
  author={Athanasiou, Dimitrios},
  year={2011}
}

@article{li1993object,
  title={Object-oriented metrics that predict maintainability},
  author={Li, Wei and Henry, Sallie},
  journal={Journal of systems and software},
  volume={23},
  number={2},
  pages={111--122},
  year={1993},
  publisher={Elsevier}
}

@article{baggen2012standardized,
  title={Standardized code quality benchmarking for improving software maintainability},
  author={Baggen, Robert and Correia, Jos{\'e} Pedro and Schill, Katrin and Visser, Joost},
  journal={Software Quality Journal},
  volume={20},
  number={2},
  pages={287--307},
  year={2012},
  publisher={Springer}
}
@inproceedings{zaidman2008mining,
  title={Mining software repositories to study co-evolution of production \& test code},
  author={Zaidman, Andy and Van Rompaey, Bart and Demeyer, Serge and Van Deursen, Arie},
  booktitle={Software Testing, Verification, and Validation, 2008 1st International Conference on},
  pages={220--229},
  year={2008},
  organization={IEEE}
}

@inproceedings{du2004refactoring,
  title={Refactoring-improving coupling and cohesion of existing code},
  author={Du Bois, Bart and Demeyer, Serge and Verelst, Jan},
  booktitle={Reverse Engineering, 2004. Proceedings. 11th Working Conference on},
  pages={144--151},
  year={2004},
  organization={IEEE}
}